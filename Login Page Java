import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;

import java.util.HashMap;
import java.util.Map;

public class LoginPageAutomation {
    private WebDriver driver;
    private WebDriverWait wait;

    public LoginPageAutomation() {
        System.setProperty("webdriver.chrome.driver", "path/to/chromedriver");
        driver = new ChromeDriver();
        wait = new WebDriverWait(driver, 10);
    }

    public void login(String username, String password) {
        driver.get("https://example.com/login");
        WebElement usernameInput = wait.until(ExpectedConditions.presenceOfElementLocated(By.id("username")));
        WebElement passwordInput = driver.findElement(By.id("password"));
        WebElement loginButton = driver.findElement(By.id("login-button"));

        usernameInput.sendKeys(username);
        passwordInput.sendKeys(password);
        loginButton.click();
    }

    public void performFunctionalTesting() {
        Map<String, String> testCases = new HashMap<>();
        testCases.put("Test Case 1: Empty username and password",
                new String[]{"", "", "Please enter username and password."});
        testCases.put("Test Case 2: Empty username",
                new String[]{"", "password123", "Please enter username."});
        testCases.put("Test Case 3: Empty password",
                new String[]{"user123", "", "Please enter password."});
        testCases.put("Test Case 4: Correct username and password",
                new String[]{"user123", "password123", "Login successful!"});

        for (Map.Entry<String, String[]> testCase : testCases.entrySet()) {
            String testCaseName = testCase.getKey();
            String[] testData = testCase.getValue();
            String expectedMessage = testData[2];

            login(testData[0], testData[1]);

            WebElement messageElement = wait.until(ExpectedConditions.presenceOfElementLocated(By.id("message")));
            String actualMessage = messageElement.getText();

            assert actualMessage.equals(expectedMessage) :
                    String.format("%s - Expected: '%s', Actual: '%s'", testCaseName, expectedMessage, actualMessage);

            driver.navigate().refresh(); // Reset the login page
        }
    }

    public void closeBrowser() {
        driver.quit();
    }

    public static void main(String[] args) {
        LoginPageAutomation automation = new LoginPageAutomation();
        automation.performFunctionalTesting();
        automation.closeBrowser();
    }
}
